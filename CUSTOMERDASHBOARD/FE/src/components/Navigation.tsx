import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import {
  Home,
  ShoppingBag,
  ShoppingCart,
  User,
  Clock,
  ChevronRight,
  BookOpen
} from 'lucide-react';
import CartCounter from './CartCounter';
import { sessionManager } from '../utils/sessionManager';

interface NavigationProps {
  isChatOpen: boolean;
  setIsChatOpen: (value: boolean) => void;
}

const Navigation: React.FC<NavigationProps> = ({ isChatOpen, setIsChatOpen }) => {
  const navigate = useNavigate();
  const location = useLocation();
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [currentFooterIndex, setCurrentFooterIndex] = useState(0);

  // Footer messages - alternating English and Marathi
  const footerMessages = [
    // English messages
    "No service fees on orders above ‚Çπ500!",
    "Enjoy free service charges when you spend over ‚Çπ500.",
    "Orders ‚Çπ500 and up come with zero service fees.",
    "Say goodbye to service fees ‚Äì just order for ‚Çπ500 or more!",
    "Get your service fee waived on all orders above ‚Çπ500.",
    "Spend ‚Çπ500 or more and skip the service charges.",
    "Big orders, no extra fees ‚Äì service fee is free over ‚Çπ500.",
    "Service charges? Not when you order for ‚Çπ500+!",
    "Shop for ‚Çπ500 or more and enjoy free service fees.",
    "Service fee? We've got it covered on all ‚Çπ500+ orders.",
    // Marathi messages
    "‚Çπ‡•´‡•¶‡•¶ ‡§™‡•á‡§ï‡•ç‡§∑‡§æ ‡§ú‡§æ‡§∏‡•ç‡§§ ‡§ñ‡§∞‡•á‡§¶‡•Ä‡§µ‡§∞ ‡§∏‡§∞‡•ç‡§µ‡•ç‡§π‡§ø‡§∏ ‡§´‡•Ä ‡§¨‡§ø‡§≤‡§æ‡§§ ‡§∏‡§Æ‡§æ‡§µ‡§ø‡§∑‡•ç‡§ü ‡§®‡§æ‡§π‡•Ä.",
    "‡§Ü‡§§‡§æ ‚Çπ‡•´‡•¶‡•¶ ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§§‡•ç‡§Ø‡§æ‡§π‡•Ç‡§® ‡§Ö‡§ß‡§ø‡§ï‡§ö‡•ç‡§Ø‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞‡§∏‡§æ‡§†‡•Ä ‡§ï‡•ã‡§£‡§§‡•Ä‡§π‡•Ä ‡§∏‡§∞‡•ç‡§µ‡•ç‡§π‡§ø‡§∏ ‡§´‡•Ä ‡§≤‡§æ‡§ó‡§£‡§æ‡§∞ ‡§®‡§æ‡§π‡•Ä!",
    "‚Çπ‡•´‡•¶‡•¶+ ‡§ö‡•ç‡§Ø‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞‡§µ‡§∞ ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ ‡§∏‡§∞‡•ç‡§µ‡•ç‡§π‡§ø‡§∏ ‡§ö‡§æ‡§∞‡•ç‡§ú ‡§´‡•ç‡§∞‡•Ä ‡§Æ‡§ø‡§≥‡•á‡§≤.",
    "‡§Æ‡•ã‡§†‡•ç‡§Ø‡§æ ‡§ë‡§∞‡•ç‡§°‡§∞‡§µ‡§∞ ‡§Æ‡•ã‡§†‡•Ä ‡§¨‡§ö‡§§ ‚Äì ‚Çπ‡•´‡•¶‡•¶‡§ö‡•ç‡§Ø‡§æ ‡§™‡•Å‡§¢‡•á ‡§∏‡§∞‡•ç‡§µ‡•ç‡§π‡§ø‡§∏ ‡§´‡•Ä ‡§∂‡•Ç‡§®‡•ç‡§Ø!",
    "‚Çπ‡•´‡•¶‡•¶ ‡§™‡•á‡§ï‡•ç‡§∑‡§æ ‡§ú‡§æ‡§∏‡•ç‡§§ ‡§ñ‡§∞‡•ç‡§ö ‡§ï‡§∞‡§æ ‡§Ü‡§£‡§ø ‡§∏‡§∞‡•ç‡§µ‡•ç‡§π‡§ø‡§∏ ‡§´‡•Ä‡§≤‡§æ ‡§ó‡•Å‡§°‡§¨‡§æ‡§Ø ‡§ï‡§∞‡§æ!",
    "‡§´‡§ï‡•ç‡§§ ‚Çπ‡•´‡•¶‡•¶‡§ö‡•ç‡§Ø‡§æ ‡§µ‡§∞‡§ö‡•Ä ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§¶‡•ç‡§Ø‡§æ, ‡§∏‡§∞‡•ç‡§µ‡•ç‡§π‡§ø‡§∏ ‡§´‡•Ä ‡§™‡•Ç‡§∞‡•ç‡§£‡§™‡§£‡•á ‡§Æ‡§æ‡§´!",
    "‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§ë‡§∞‡•ç‡§°‡§∞ ‚Çπ‡•´‡•¶‡•¶‡§ö‡•ç‡§Ø‡§æ ‡§™‡•Å‡§¢‡•á ‡§ó‡•á‡§≤‡•Ä ‡§ï‡•Ä ‡§∏‡§∞‡•ç‡§µ‡•ç‡§π‡§ø‡§∏ ‡§ö‡§æ‡§∞‡•ç‡§ú ‡§∂‡•Ç‡§®‡•ç‡§Ø ‡§π‡•ã‡§§‡•ã.",
    "‚Çπ‡•´‡•¶‡•¶+ ‡§ö‡•ç‡§Ø‡§æ ‡§ñ‡§∞‡•á‡§¶‡•Ä‡§µ‡§∞ ‡§∏‡§∞‡•ç‡§µ‡•ç‡§π‡§ø‡§∏ ‡§´‡•Ä‡§ö‡•ç‡§Ø‡§æ ‡§ù‡§Ç‡§ù‡§ü‡•Ä‡§™‡§æ‡§∏‡•Ç‡§® ‡§Æ‡•Å‡§ï‡•ç‡§§‡§§‡§æ.",
    "‡§Ü‡§§‡§æ ‚Çπ‡•´‡•¶‡•¶‡§™‡•á‡§ï‡•ç‡§∑‡§æ ‡§ú‡§æ‡§∏‡•ç‡§§ ‡§ë‡§∞‡•ç‡§°‡§∞‡§µ‡§∞ ‡§∏‡§∞‡•ç‡§µ‡•ç‡§π‡§ø‡§∏ ‡§´‡•Ä ‡§ï‡§æ‡§π‡•Ä‡§ö ‡§≤‡§æ‡§ó‡§£‡§æ‡§∞ ‡§®‡§æ‡§π‡•Ä.",
    "‚Çπ‡•´‡•¶‡•¶‡§ö‡•ç‡§Ø‡§æ ‡§™‡•Å‡§¢‡•á ‡§ñ‡§∞‡•á‡§¶‡•Ä ‡§ï‡•á‡§≤‡•ç‡§Ø‡§æ‡§µ‡§∞ ‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§∏‡§∞‡•ç‡§µ‡•ç‡§π‡§ø‡§∏ ‡§´‡•Ä ‡§Ü‡§Æ‡§ö‡•ç‡§Ø‡§æ‡§ï‡§°‡•Ç‡§®."
  ];

  // Rotate footer messages every 6 seconds (slower)
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentFooterIndex((prevIndex) => 
        prevIndex === footerMessages.length - 1 ? 0 : prevIndex + 1
      );
    }, 6000);

    return () => clearInterval(interval);
  }, [footerMessages.length]);

  // Check if user is logged in
  useEffect(() => {
    const checkLoginStatus = () => {
      const isSessionValid = sessionManager.isSessionValid();
    const isSkipped = localStorage.getItem('isSkippedLogin');
      setIsLoggedIn(isSessionValid && !isSkipped);
    };

    // Initial check
    checkLoginStatus();
    
    // Listen for session expiry event
    const handleSessionExpired = () => {
      setIsLoggedIn(false);
    };
    
    window.addEventListener('sessionExpired', handleSessionExpired);
    
    // Listen for storage changes
    const handleStorageChange = () => {
      checkLoginStatus();
    };
    
    window.addEventListener('storage', handleStorageChange);
    
    return () => {
      window.removeEventListener('sessionExpired', handleSessionExpired);
      window.removeEventListener('storage', handleStorageChange);
    };
  }, []);

  const hiddenPaths = ['/', '/signup', '/login', '/verify-age'];

  if (hiddenPaths.includes(location.pathname)) return null;

  const handleNavClick = (path: string) => {
    if (path === 'chat') {
      setIsChatOpen(true);
    } else {
      navigate(path);
    }
  };
  
  const handleLogout = () => {
    sessionManager.clearSession();
    navigate('/login');
  };

  const isActive = (path: string) => location.pathname === path;

  return (
    <>
      {/* Add CSS animation */}
      <style>
        {`
          @keyframes slideInOut {
            0% { transform: translateX(100%); opacity: 0; }
            10% { transform: translateX(0); opacity: 1; }
            90% { transform: translateX(0); opacity: 1; }
            100% { transform: translateX(-100%); opacity: 0; }
          }
          
          .footer-message {
            animation: slideInOut 6s ease-in-out infinite;
            white-space: nowrap;
            overflow: hidden;
          }
        `}
      </style>
      
      {/* Bottom Navigation */}
      <nav className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-300 z-40">
        <div className="max-w-lg mx-auto px-4 py-2 flex justify-between items-center">
          <NavButton
            icon={<Home size={24} />}
            label="Home"
            isActive={isActive('/dashboard')}
            onClick={() => handleNavClick('/dashboard')}
          />
          <NavButton
            icon={<ShoppingBag size={24} />}
            label="Products"
            isActive={isActive('/products')}
            onClick={() => handleNavClick('/products')}
          />
          <NavButton
            icon={
              <div className="relative">
                <ShoppingCart size={24} />
                <CartCounter size="small" />
              </div>
            }
            label="Cart"
            isActive={isActive('/cart')}
            onClick={() => handleNavClick('/cart')}
          />
          <NavButton
            icon={<Clock size={24} />}
            label="Orders"
            isActive={isActive('/order-history')}
            onClick={() => handleNavClick('/order-history')}
          />
          {isLoggedIn ? (
          <NavButton
            icon={<User size={24} />}
            label="Profile"
            isActive={isActive('/profile')}
            onClick={() => handleNavClick('/profile')}
          />
          ) : (
            <NavButton
              icon={<BookOpen size={24} />}
              label="Blog"
              isActive={isActive('/blog')}
              onClick={() => handleNavClick('/blog')}
            />
          )}
        </div>
        {/* Rotating Promotional Message */}
        <div className="py-1 text-center text-red-600 text-xs font-medium bg-white border-t border-gray-200 overflow-hidden">
          <p 
            className="footer-message"
            style={{
              margin: 0,
              padding: '1px 6px',
              display: 'inline-block'
            }}
          >
            {footerMessages[currentFooterIndex]}
          </p>
        </div>
        {/* Health Warning */}
        <div className="py-1 text-center text-red-500 text-xs font-semibold bg-white">
        üö≠ ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§ï‡•Å‡§ü‡•Å‡§Ç‡§¨‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Æ‡§¶‡•ç‡§Ø‡§™‡§æ‡§® ‡§Ü‡§£‡§ø ‡§ß‡•Ç‡§Æ‡•ç‡§∞‡§™‡§æ‡§® ‡§∏‡•ã‡§°‡§æ üöØ
        </div>
      </nav>
    </>
  );
};

interface NavButtonProps {
  icon: React.ReactNode;
  label: string;
  isActive: boolean;
  onClick: () => void;
}

const NavButton: React.FC<NavButtonProps> = ({ icon, label, isActive, onClick }) => (
  <button
    onClick={onClick}
    className={`flex flex-col items-center px-3 py-2 ${
      isActive ? 'text-blue-600' : 'text-gray-600'
    }`}
  >
    {icon}
    <span className="text-xs">{label}</span>
  </button>
);

export default Navigation;
